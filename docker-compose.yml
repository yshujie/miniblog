version: '3.8'

services:
  miniblog-backend:
    image: ${BACKEND_IMAGE_TAG:-miniblog-backend:prod}
    build:
      context: .
      dockerfile: build/docker/miniblog/Dockerfile.prod.backend
    container_name: miniblog-backend
    restart: unless-stopped
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - MINIBLOG_CONFIG_PATH=/app/configs
      # 连接到外部基础设施服务
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE:-miniblog}
      - MYSQL_USERNAME=${MYSQL_USERNAME:-miniblog}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-miniblog123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-1}
      - JWT_SECRET=${JWT_SECRET:-miniblog_jwt_secret_key_change_in_production}
      # MINIBLOG_* 环境变量用于 viper 自动覆盖配置
      - MINIBLOG_DATABASE_HOST=${MYSQL_HOST:-mysql}
      - MINIBLOG_DATABASE_PORT=3306
      - MINIBLOG_DATABASE_DBNAME=${MYSQL_DATABASE:-miniblog}
      - MINIBLOG_DATABASE_USERNAME=${MYSQL_USERNAME:-miniblog}
      - MINIBLOG_DATABASE_PASSWORD=${MYSQL_PASSWORD:-miniblog123}
      - MINIBLOG_REDIS_HOST=${REDIS_HOST:-redis}
      - MINIBLOG_REDIS_PORT=6379
      - MINIBLOG_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - MINIBLOG_REDIS_DB=${REDIS_DB:-1}
      - MINIBLOG_JWT_SECRET=${JWT_SECRET:-miniblog_jwt_secret_key_change_in_production}
      - MINIBLOG_FEISHU_DOCREADER_APPID=${FEISHU_DOCREADER_APPID:-}
      - MINIBLOG_FEISHU_DOCREADER_APPSECRET=${FEISHU_DOCREADER_APPSECRET:-}
    volumes:
      - ./configs:/app/configs:ro
      - /data/logs/miniblog/backend:/data/logs/miniblog
      - miniblog-uploads:/app/uploads
      - /data/ssl/certs/api.yangshujie.com.crt:/etc/miniblog/ssl/api.yangshujie.com.crt:ro
      - /data/ssl/private/api.yangshujie.com.key:/etc/miniblog/ssl/api.yangshujie.com.key:ro
    networks:
      - miniblog_net
    ports:
      - "8090:8080"  # 映射到 8090,避免与 Jenkins 的 8080 冲突
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  miniblog-frontend-blog:
    image: ${FRONTEND_BLOG_IMAGE_TAG:-miniblog-frontend-blog:prod}
    build:
      context: ./web/miniblog-web
      dockerfile: ../../build/docker/miniblog/Dockerfile.prod.frontend.blog
      args:
        - NODE_ENV=production
        - VITE_API_URL=http://localhost/api/v1
    container_name: miniblog-frontend-blog
    restart: unless-stopped
    networks:
      - miniblog_net
    volumes:
      - /data/logs/miniblog/frontend-blog:/var/log/nginx
      - blog-dist:/app/dist

  miniblog-frontend-admin:
    image: ${FRONTEND_ADMIN_IMAGE_TAG:-miniblog-frontend-admin:prod}
    build:
      context: ./web/miniblog-web-admin
      dockerfile: ../../build/docker/miniblog/Dockerfile.prod.frontend.admin
      args:
        - NODE_ENV=production
        - VUE_APP_API_URL=http://localhost/api/v1
    container_name: miniblog-frontend-admin
    restart: unless-stopped
    networks:
      - miniblog_net
    volumes:
      - /data/logs/miniblog/frontend-admin:/var/log/nginx
      - admin-dist:/app/dist

volumes:
  miniblog-uploads:
    name: miniblog-uploads
  blog-dist:
    name: miniblog-blog-dist
  admin-dist:
    name: miniblog-admin-dist

networks:
  # MiniBlog 应用专用网络
  # 包含：backend、frontend-blog、frontend-admin、mysql、redis
  # 使用 external: true 表示网络需要提前创建：docker network create miniblog_net
  miniblog_net:
    external: true

# build/docker/miniblog/compose-prod-infra.yml
version: '3.8'

services:
  mysql:
    image: miniblog-mysql:dev
    ports:
      - "3306:3306"
    volumes:
      - /data/mysql/data:/var/lib/mysql
      - /data/logs/mysql:/var/log/mysql
    environment:
      TZ: Asia/Shanghai
    networks:
      - miniblog-network
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: miniblog-redis:dev
    ports:
      - "6379:6379"
    volumes:
      - /data/redis/data:/data
      - /data/logs/redis:/var/log/redis
    networks:
      - miniblog-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    image: miniblog-backend:dev 
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - miniblog-network
    restart: always
    ports:
      - "8081:8081"
      - "8443:8443"
    volumes:
      - /data/logs/miniblog:/data/logs/miniblog

  frontend:
    image: miniblog-frontend:dev
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - miniblog-network
    restart: always
    ports:
      - "3000:80"           # 宿主机 3000 -> 容器内 Nginx 的 80

  nginx:
    image: miniblog-nginx:dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /data/logs/nginx:/var/log/nginx
    networks:
      - miniblog-network
    restart: always
    dns:
      - 8.8.8.8
      - 114.114.114.114
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  miniblog-network:
    name: miniblog-network
    driver: bridge
version: '3.8'
services:
  backend:
    image: miniblog-backend:prod 
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - miniblog-network
    restart: always
    environment:
      - MINIBLOG_DATABASE_HOST=${MYSQL_HOST}
      - MINIBLOG_DATABASE_PORT=${MYSQL_PORT}
      - MINIBLOG_DATABASE_USER=${MYSQL_USER}
      - MINIBLOG_DATABASE_NAME=${MYSQL_NAME}
      - MINIBLOG_DATABASE_PASSWORD=${MYSQL_PASSWORD}
      - MINIBLOG_REDIS_HOST=${REDIS_HOST}
      - MINIBLOG_REDIS_PORT=${REDIS_PORT}
      - MINIBLOG_REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIBLOG_REDIS_DB=${REDIS_DB}
      - MINIBLOG_JWT_SECRET=${JWT_SECRET}
      - MINIBLOG_FEISHU_DOC_READER_APP_ID=${FEISHU_DOC_READER_APP_ID}
      - MINIBLOG_FEISHU_DOC_READER_APP_SECRET=${FEISHU_DOC_READER_APP_SECRET}
    ports:
      - "8081:8081"
      - "8443:8443"
    volumes:
      - /data/logs/miniblog:/data/logs/miniblog

  frontend-blog:
    image: miniblog-frontend-blog:prod
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - miniblog-network
    restart: always
    ports:
      - "3000:80"           # 宿主机 3000 -> 容器内 Nginx 的 80

  frontend-admin:
    image: miniblog-frontend-admin:prod
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - miniblog-network
    restart: always
    ports:
      - "3001:80"           # 宿主机 3001 -> 容器内 Nginx 的 80


  nginx:
    image: miniblog-nginx:prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /data/logs/nginx:/var/log/nginx
    networks:
      - miniblog-network
    restart: always
    dns:
      - 8.8.8.8
      - 114.114.114.114
    depends_on:
      - backend
      - frontend-blog
      - frontend-admin
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

# 网络，使用 miniblog-network
networks:
  miniblog-network:
    external: true
    name: miniblog-network
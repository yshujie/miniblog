# ---------- Builder ----------
FROM golang:1.24-alpine AS builder

# 设置构建参数
ARG GOPROXY
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG GO111MODULE
ARG MYSQL_HOST
ARG MYSQL_PORT
ARG MYSQL_USERNAME
ARG MYSQL_DBNAME
ARG MYSQL_PASSWORD
ARG REDIS_HOST
ARG REDIS_PORT
ARG REDIS_PASSWORD
ARG REDIS_DB
ARG JWT_SECRET
ARG FEISHU_DOCREADER_APPID
ARG FEISHU_DOCREADER_APPSECRET

# 设置环境变量
ENV GOPROXY=${GOPROXY}
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV GO111MODULE=${GO111MODULE}
ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64

# 设置 miniblog 环境变量
ENV MINIBLOG_DATABASE_HOST=${MYSQL_HOST}
ENV MINIBLOG_DATABASE_PORT=${MYSQL_PORT}
ENV MINIBLOG_DATABASE_USERNAME=${MYSQL_USERNAME}
ENV MINIBLOG_DATABASE_DBNAME=${MYSQL_DBNAME}
ENV MINIBLOG_DATABASE_PASSWORD=${MYSQL_PASSWORD}
ENV MINIBLOG_REDIS_HOST=${REDIS_HOST}
ENV MINIBLOG_REDIS_PORT=${REDIS_PORT}
ENV MINIBLOG_REDIS_PASSWORD=${REDIS_PASSWORD}
ENV MINIBLOG_REDIS_DB=${REDIS_DB}
ENV MINIBLOG_JWT_SECRET=${JWT_SECRET}
ENV MINIBLOG_FEISHU_DOCREADER_APPID=${FEISHU_DOCREADER_APPID}
ENV MINIBLOG_FEISHU_DOCREADER_APPSECRET=${FEISHU_DOCREADER_APPSECRET}

# 安装依赖
RUN apk add --no-cache git ca-certificates

# 设置工作目录
WORKDIR /app

# 复制 go.mod 和 go.sum
COPY go.mod go.sum ./

# 下载依赖
RUN go mod download

# 复制项目文件
COPY . .

# 构建可执行文件
WORKDIR /app/cmd/miniblog

# 使用 Go 构建缓存
RUN --mount=type=cache,target=/root/.cache/go-build \
  --mount=type=cache,target=/go/pkg/mod \
  go build -o miniblog .

# ---------- Runtime ----------

# 设置时区
FROM alpine:latest
RUN apk add --no-cache ca-certificates tzdata \
  && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
  && echo Asia/Shanghai > /etc/timezone

# 设置工作目录
WORKDIR /app

# 复制可执行文件
COPY --from=builder /app/cmd/miniblog/miniblog /usr/local/bin/miniblog

# 复制配置文件
COPY --from=builder /app/configs/miniblog.yaml /etc/miniblog/config.yaml

# 复制 ssl 文件
COPY --from=builder /app/configs/nginx/ssl/ /etc/miniblog/ssl/

# 暴露端口
EXPOSE 8081
EXPOSE 8443

# 启动命令
ENTRYPOINT ["/usr/local/bin/miniblog", "--config", "/etc/miniblog/config.yaml"]

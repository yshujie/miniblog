# ---------- Builder ----------
FROM golang:1.24-alpine AS builder


# Go 构建相关参数（可选）
ARG GOPROXY
ENV GOPROXY=${GOPROXY}
ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64

# 安装依赖
RUN apk add --no-cache git ca-certificates

# 设置工作目录
WORKDIR /app

# 复制 go.mod 和 go.sum
COPY go.mod go.sum ./

# 下载依赖
RUN go mod download

# 复制项目文件
COPY . .

# 构建可执行文件
WORKDIR /app/cmd/miniblog

# 使用 Go 构建缓存
RUN --mount=type=cache,target=/root/.cache/go-build \
  --mount=type=cache,target=/go/pkg/mod \
  go build -o miniblog .

# ---------- Runtime ----------

# 设置时区
FROM alpine:latest
RUN apk add --no-cache ca-certificates tzdata \
  && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
  && echo Asia/Shanghai > /etc/timezone

# 设置工作目录
WORKDIR /app

# 复制可执行文件
COPY --from=builder /app/cmd/miniblog/miniblog /usr/local/bin/miniblog

# 复制配置文件
COPY --from=builder /app/configs/miniblog.yaml /etc/miniblog/config.yaml


# 可选：复制 ssl 文件（如有）
RUN mkdir -p /etc/miniblog/ssl
# 证书通常由部署环境或 infra 项目挂载到 /etc/miniblog/ssl
# 不在构建阶段复制仓库中的 files（configs/nginx/ssl 在 .gitignore 中）

# 暴露端口
EXPOSE 8081
EXPOSE 8443

# 启动命令，可通过 docker-compose.yml 覆盖
ENTRYPOINT ["/usr/local/bin/miniblog", "--config", "/etc/miniblog/config.yaml"]

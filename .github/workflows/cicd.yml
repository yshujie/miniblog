name: CI/CD (miniblog)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip unit tests'
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-backend
  FE_BLOG_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-blog
  FE_ADMIN_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-admin
  TAG: ${{ github.sha }}

concurrency:
  group: miniblog-prod
  cancel-in-progress: false

jobs:
  # 单元测试阶段
  test:
    if: ${{ !inputs.skip_tests }}
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum
      
      - name: Fix Go module cache permissions
        run: |
          # 修复 Go 模块缓存的权限问题
          if [ -d ~/go/pkg/mod ]; then
            chmod -R u+w ~/go/pkg/mod || true
            echo "✅ Go 模块缓存权限已修复"
          else
            echo "✅ Go 模块缓存目录不存在，跳过"
          fi
      
      - name: Download dependencies
        run: go mod download
      
      - name: Run unit tests
        run: make test-backend

  build-and-push:
    needs: [test]
    if: ${{ !cancelled() && (success() || inputs.skip_tests) }}
    runs-on: [self-hosted, macOS, ARM64]

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
          echo "✅ 已登录到 GHCR"

      - name: Setup Docker Buildx
        run: |
          # 验证 buildx 已安装
          echo "=== Buildx 版本 ==="
          docker buildx version
          echo ""
          
          # 创建或使用现有的 builder
          if docker buildx inspect miniblog-builder &>/dev/null; then
            echo "✅ 使用现有 builder: miniblog-builder"
            docker buildx use miniblog-builder
          else
            echo "📦 创建新的 builder: miniblog-builder"
            docker buildx create --name miniblog-builder --driver docker-container --use
          fi
          
          # 启动 builder
          docker buildx inspect --bootstrap
          
          echo ""
          echo "=== 可用的 Builders ==="
          docker buildx ls

      # === Backend ===
      - name: Build & Push backend (linux/amd64)
        run: |
          echo "🔨 构建 Backend 镜像..."
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.backend \
            --build-arg GOPROXY=https://goproxy.cn,direct \
            --tag ${{ env.BACKEND_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.BACKEND_IMAGE }}:latest \
            --push \
            .
          echo "✅ Backend 镜像构建并推送成功"

      # === Frontend Blog ===
      - name: Build & Push frontend-blog
        run: |
          echo "🔨 构建 Frontend Blog 镜像..."
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.blog \
            --tag ${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_BLOG_IMAGE }}:latest \
            --push \
            .
          echo "✅ Frontend Blog 镜像构建并推送成功"

      # === Frontend Admin ===
      - name: Build & Push frontend-admin
        run: |
          echo "🔨 构建 Frontend Admin 镜像..."
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.admin \
            --tag ${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_ADMIN_IMAGE }}:latest \
            --push \
            .
          echo "✅ Frontend Admin 镜像构建并推送成功"

  deploy:
    # 使用 macOS 自托管 runner，避免容器 action 限制
    runs-on: [self-hosted, macOS, ARM64]
    needs: build-and-push
    environment: production
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      # 准备 SSH 密钥（一次性设置）
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SVRA_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SVRA_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to Server A via SSH
        run: |
          ssh -F /dev/null \
            -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SVRA_USER }}@${{ secrets.SVRA_HOST }} \
            'bash -s' <<'ENDSSH'
          set -euo pipefail

          # 1) 预置网络/目录（幂等）
          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          # Try to create directories; if normal mkdir fails (permission), try non-interactive sudo (-n).
          if ! mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} 2>/dev/null; then
            echo "Attempting to use sudo to create directories (non-interactive)" >&2
            sudo -n mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} || (
              echo "ERROR: Unable to create required directories. Ensure deploy user has NOPASSWD sudo or create these dirs manually." >&2
              exit 1
            )
          fi
          cd /opt/miniblog

          # 2) 拉代码（要求服务器已配置 Deploy Key：Host github-miniblog）
          if [ -d .git ]; then
            git fetch --all -p && git reset --hard origin/main
          else
            git clone github-miniblog:${{ github.repository }} .
          fi

          # 3) 登录 GHCR（拉镜像）
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

          # 4) 写入 .env（用带引号的 heredoc 防止远端 shell 展开）
          cat > .env <<'EOF'
          BACKEND_IMAGE_TAG=${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          FRONTEND_BLOG_IMAGE_TAG=${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }}
          FRONTEND_ADMIN_IMAGE_TAG=${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }}

          GIN_MODE=release

          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DBNAME }}
          MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

          JWT_SECRET=${{ secrets.JWT_SECRET }}

          FEISHU_DOCREADER_APPID=${{ secrets.FEISHU_DOCREADER_APPID }}
          FEISHU_DOCREADER_APPSECRET=${{ secrets.FEISHU_DOCREADER_APPSECRET }}
          EOF

          # 5) 拉取并无停机更新（生产覆盖文件固定 8090 端口）
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

          # Ensure nginx is connected to the application network and reload config to pick up new upstreams
          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          docker network connect miniblog_net nginx || true

          # Poll backend health endpoint (from inside miniblog_net) before reloading nginx
          echo "Polling backend health (up to 60s)..."
          HEALTH_OK=1
          for i in $(seq 1 30); do
            if docker run --rm --network=miniblog_net curlimages/curl:8.1.2 -fsS http://miniblog-backend:8080/health >/dev/null 2>&1; then
              echo "Backend healthy after $((i*2))s"
              HEALTH_OK=0
              break
            fi
            sleep 2
          done
          if [ "$HEALTH_OK" -ne 0 ]; then
            echo "WARNING: Backend health check failed after 60s; nginx reload will not be attempted" >&2
            exit 1
          fi

          docker exec nginx nginx -t && docker exec nginx nginx -s reload || true

          # 6) 健康检查 + 简要状态
          sleep 2
          (curl -fsS http://127.0.0.1:8090/health && echo " HEALTH=OK") || (echo "HEALTH=FAIL"; exit 1)
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
          ENDSSH

      # 数据库相关步骤（首次部署时可能需要）：
      # 已由维护人员在目标环境手动执行。若将来需要恢复自动化，请恢复下面被移除的步骤：
      #  - DB Init  (首次初始化)
      #  - DB Migrate (数据库迁移)
      #  - DB Seed (种子数据导入)
      # 为避免意外在每次部署执行，已暂时移除这些步骤。

      # 清理 SSH 密钥
      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

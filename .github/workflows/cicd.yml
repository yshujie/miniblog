name: CI/CD (miniblog)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip unit tests'
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-backend
  FE_BLOG_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-blog
  FE_ADMIN_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-admin
  TAG: ${{ github.sha }}

concurrency:
  group: miniblog-prod
  cancel-in-progress: false

jobs:
  test:
    if: ${{ !inputs.skip_tests }}
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Fix Go module cache permissions (best-effort)
        run: |
          [ -d "$HOME/go/pkg/mod" ] && chmod -R u+w "$HOME/go/pkg/mod" || true

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: make test-backend

  build-and-push:
    needs: [test]
    if: ${{ !cancelled() && (success() || inputs.skip_tests) }}
    runs-on: [self-hosted, macOS, ARM64]
    env:
      # 明确关闭代理（避免 buildkit 里带进未知代理）
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: ""
    steps:
      - uses: actions/checkout@v4

      # 0) 彻底“隔离”本次 Docker 配置，杜绝钥匙串
      - name: Use ephemeral DOCKER_CONFIG (no credsStore)
        run: |
          export DOCKER_CONFIG="$RUNNER_TEMP/.docker"
          mkdir -p "$DOCKER_CONFIG"
          cat > "$DOCKER_CONFIG/config.json" <<'JSON'
          {
            "auths": {
              "https://index.docker.io/v1/": {}
            }
          }
          JSON
          echo "DOCKER_CONFIG=$DOCKER_CONFIG" >> "$GITHUB_ENV"
          echo "🔒 Using DOCKER_CONFIG=$DOCKER_CONFIG"

      # 0.1) 把 buildx 插件显式暴露到这个临时 DOCKER_CONFIG（方案A）
      - name: Expose buildx under ephemeral DOCKER_CONFIG
        run: |
          mkdir -p "$DOCKER_CONFIG/cli-plugins"
          if [ -x /Applications/Docker.app/Contents/Resources/cli-plugins/docker-buildx ]; then
            SRC=/Applications/Docker.app/Contents/Resources/cli-plugins/docker-buildx
          elif [ -x "$HOME/.docker/cli-plugins/docker-buildx" ]; then
            SRC="$HOME/.docker/cli-plugins/docker-buildx"
          elif command -v docker-buildx >/dev/null 2>&1; then
            SRC="$(command -v docker-buildx)"
          else
            echo "ERROR: docker-buildx binary not found on this runner" >&2
            exit 1
          fi
          ln -sf "$SRC" "$DOCKER_CONFIG/cli-plugins/docker-buildx"
          docker buildx version

      # 1) GHCR 认证走 DOCKER_AUTH_CONFIG（不触发 login/keychain）
      - name: Prepare GHCR auth & (re)create builder with env.DOCKER_CONFIG only
        run: |
          USER="${{ github.repository_owner }}"
          TOKEN="${{ secrets.GHCR_TOKEN }}"
          [ -z "$TOKEN" ] && TOKEN="${{ secrets.GITHUB_TOKEN }}"
          [ -n "$TOKEN" ] || { echo "ERROR: Neither GHCR_TOKEN nor GITHUB_TOKEN available."; exit 1; }
          AUTH=$(printf "%s:%s" "$USER" "$TOKEN" | base64 | tr -d '\n')
          echo 'DOCKER_AUTH_CONFIG={"auths":{"ghcr.io":{"auth":"'"$AUTH"'"}}}' >> "$GITHUB_ENV"
          echo "✅ DOCKER_AUTH_CONFIG ready"

          # 干净重建 builder：只注入 DOCKER_CONFIG（不要传 NO_PROXY/HTTP(S)_PROXY，避免逗号被拆）
          if docker buildx inspect miniblog-builder >/dev/null 2>&1; then
            docker buildx rm -f miniblog-builder >/dev/null 2>&1 || true
          fi
          docker buildx create --name miniblog-builder --driver docker-container --use \
            --driver-opt env.DOCKER_CONFIG="$DOCKER_CONFIG"
          docker buildx inspect --bootstrap
          docker buildx ls

      # === Backend ===
      - name: Build & Push backend (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.backend \
            --build-arg GOPROXY=https://goproxy.cn,direct \
            --tag ${{ env.BACKEND_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.BACKEND_IMAGE }}:latest \
            --push \
            .

      # === Frontend Blog ===
      - name: Build & Push frontend-blog (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.blog \
            --tag ${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_BLOG_IMAGE }}:latest \
            --push \
            .

      # === Frontend Admin ===
      - name: Build & Push frontend-admin (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.admin \
            --tag ${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_ADMIN_IMAGE }}:latest \
            --push \
            .

  deploy:
    runs-on: [self-hosted, macOS, ARM64]
    needs: build-and-push
    environment: production
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SVRA_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SVRA_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to Server via SSH (use SVRA_USER)
        run: |
          ssh -F /dev/null \
            -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SVRA_USER }}@${{ secrets.SVRA_HOST }} \
            'bash -s' <<'ENDSSH'
          set -euo pipefail

          # 远端也用临时 DOCKER_CONFIG，避免任何 credsStore/钥匙串干扰
          export DOCKER_CONFIG="$(mktemp -d)"
          printf '{}' > "$DOCKER_CONFIG/config.json"

          # 目录与网络
          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          if ! mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} 2>/dev/null; then
            sudo -n mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} || {
              echo "ERROR: Need permission to create /opt/miniblog & /data/logs/miniblog/*" >&2
              exit 1
            }
          fi
          cd /opt/miniblog

          # 拉取/更新仓库（支持私库：提供 SVRA_GIT_TOKEN 即可）
          if [ -d .git ]; then
            git fetch --all -p && git reset --hard origin/main
          else
            REPO_URL="https://github.com/${{ github.repository }}.git"
            if [ -n "${{ secrets.SVRA_GIT_TOKEN }}" ]; then
              REPO_URL="https://${{ secrets.SVRA_GIT_TOKEN }}@github.com/${{ github.repository }}.git"
            fi
            git clone "$REPO_URL" .
          fi

          # GHCR 鉴权：优先 GHCR_TOKEN，其次 GITHUB_TOKEN
          USER_GH="${{ github.repository_owner }}"
          TOKEN_GH="${{ secrets.GHCR_TOKEN }}"
          [ -z "$TOKEN_GH" ] && TOKEN_GH="${{ secrets.GITHUB_TOKEN }}"
          AUTH=$(printf "%s:%s" "$USER_GH" "$TOKEN_GH" | base64 | tr -d '\n')
          export DOCKER_AUTH_CONFIG='{"auths":{"ghcr.io":{"auth":"'"$AUTH"'"}}}'

          # 写入 .env，使用本次构建的镜像标签
          cat > .env <<'EOF'
          BACKEND_IMAGE_TAG=${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          FRONTEND_BLOG_IMAGE_TAG=${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }}
          FRONTEND_ADMIN_IMAGE_TAG=${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }}

          GIN_MODE=release

          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DBNAME }}
          MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

          JWT_SECRET=${{ secrets.JWT_SECRET }}

          FEISHU_DOCREADER_APPID=${{ secrets.FEISHU_DOCREADER_APPID }}
          FEISHU_DOCREADER_APPSECRET=${{ secrets.FEISHU_DOCREADER_APPSECRET }}
          EOF

          # 拉镜像并启动
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

          # 接入共享网络 & 健康检查 & nginx reload
          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          docker network connect miniblog_net nginx || true

          echo "Polling backend health (up to 60s)..."
          for i in $(seq 1 30); do
            if docker run --rm --network=miniblog_net curlimages/curl:8.1.2 -fsS http://miniblog-backend:8080/health >/dev/null 2>&1; then
              echo "Backend healthy"
              break
            fi
            sleep 2
          done

          docker exec nginx nginx -t && docker exec nginx nginx -s reload || true

          sleep 2
          (curl -fsS http://127.0.0.1:8090/health && echo " HEALTH=OK") || (echo "HEALTH=FAIL"; exit 1)
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
          ENDSSH

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/deploy_key

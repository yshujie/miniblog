name: CI/CD (miniblog)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip unit tests'
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-backend
  FE_BLOG_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-blog
  FE_ADMIN_IMAGE: ghcr.io/${{ github.repository_owner }}/miniblog-frontend-admin
  TAG: ${{ github.sha }}

concurrency:
  group: miniblog-prod
  cancel-in-progress: false

jobs:
  test:
    if: ${{ !inputs.skip_tests }}
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: |
            go.sum
            go.work.sum

      - name: Fix Go module cache permissions (best-effort)
        run: |
          [ -d "$HOME/go/pkg/mod" ] && chmod -R u+w "$HOME/go/pkg/mod" || true

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: make test-backend

  build-and-push:
    needs: [test]
    if: ${{ !cancelled() && (success() || inputs.skip_tests) }}
    runs-on: [self-hosted, macOS, ARM64]
    env:
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: ghcr.io,*.ghcr.io,github.com,*.github.com
    steps:
      - uses: actions/checkout@v4

      # 生成 DOCKER_AUTH_CONFIG（用 GHCR_TOKEN；没有就回退 GITHUB_TOKEN）
      - name: Prepare registry auth (DOCKER_AUTH_CONFIG)
        run: |
          USER="${{ github.repository_owner }}"
          TOKEN="${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}"
          if [ -z "$TOKEN" ]; then
            echo "ERROR: Neither GHCR_TOKEN nor GITHUB_TOKEN available." >&2
            exit 1
          fi
          AUTH=$(printf "%s:%s" "$USER" "$TOKEN" | base64 | tr -d '\n')
          {
            echo 'DOCKER_AUTH_CONFIG={"auths":{"ghcr.io":{"auth":"'"$AUTH"'"}}}'
          } >> "$GITHUB_ENV"
          echo "✅ DOCKER_AUTH_CONFIG ready (inline, no keychain)"

      - name: Setup Docker Buildx
        run: |
          docker buildx version
          if docker buildx inspect miniblog-builder &>/dev/null; then
            docker buildx use miniblog-builder
          else
            docker buildx create --name miniblog-builder --driver docker-container --use
          fi
          docker buildx inspect --bootstrap
          docker buildx ls

      - name: Build & Push backend (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.backend \
            --build-arg GOPROXY=https://goproxy.cn,direct \
            --tag ${{ env.BACKEND_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.BACKEND_IMAGE }}:latest \
            --push \
            .

      - name: Build & Push frontend-blog (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.blog \
            --tag ${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_BLOG_IMAGE }}:latest \
            --push \
            .

      - name: Build & Push frontend-admin (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file build/docker/miniblog/Dockerfile.prod.frontend.admin \
            --tag ${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }} \
            --tag ${{ env.FE_ADMIN_IMAGE }}:latest \
            --push \
            .

  deploy:
    runs-on: [self-hosted, macOS, ARM64]
    needs: build-and-push
    environment: production
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SVRA_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SVRA_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to Server A via SSH (ephemeral auth, no docker login)
        run: |
          ssh -F /dev/null \
            -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SVRA_USER }}@${{ secrets.SVRA_HOST }} \
            'bash -s' <<'ENDSSH'
          set -euo pipefail

          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          if ! mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} 2>/dev/null; then
            sudo -n mkdir -p /opt/miniblog /data/logs/miniblog/{backend,frontend-blog,frontend-admin} || {
              echo "ERROR: Need permission to create /opt/miniblog and /data/logs/miniblog/*" >&2
              exit 1
            }
          fi
          cd /opt/miniblog

          # 拉代码（HTTPS，公共仓库零依赖；设为私库时用只读 Token 替换）
          if [ -d .git ]; then
            git fetch --all -p
            git reset --hard origin/main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi

          # 远端也用 DOCKER_AUTH_CONFIG（不进行 docker login）
          USER="${{ github.repository_owner }}"
          TOKEN="${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}"
          AUTH=$(printf "%s:%s" "$USER" "$TOKEN" | base64 | tr -d '\n')
          export DOCKER_AUTH_CONFIG='{"auths":{"ghcr.io":{"auth":"'"$AUTH"'"}}}'

          # 生成 .env
          cat > .env <<'EOF'
          BACKEND_IMAGE_TAG=${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          FRONTEND_BLOG_IMAGE_TAG=${{ env.FE_BLOG_IMAGE }}:${{ env.TAG }}
          FRONTEND_ADMIN_IMAGE_TAG=${{ env.FE_ADMIN_IMAGE }}:${{ env.TAG }}

          GIN_MODE=release

          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DBNAME }}
          MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

          JWT_SECRET=${{ secrets.JWT_SECRET }}

          FEISHU_DOCREADER_APPID=${{ secrets.FEISHU_DOCREADER_APPID }}
          FEISHU_DOCREADER_APPSECRET=${{ secrets.FEISHU_DOCREADER_APPSECRET }}
          EOF

          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

          docker network inspect miniblog_net >/dev/null 2>&1 || docker network create miniblog_net
          docker network connect miniblog_net nginx || true

          echo "Polling backend health (up to 60s)..."
          HEALTH_OK=1
          for i in $(seq 1 30); do
            if docker run --rm --network=miniblog_net curlimages/curl:8.1.2 -fsS http://miniblog-backend:8080/health >/dev/null 2>&1; then
              echo "Backend healthy after $((i*2))s"
              HEALTH_OK=0
              break
            fi
            sleep 2
          done
          [ "$HEALTH_OK" -eq 0 ] || { echo "WARNING: Backend health check failed"; exit 1; }

          docker exec nginx nginx -t && docker exec nginx nginx -s reload || true

          sleep 2
          (curl -fsS http://127.0.0.1:8090/health && echo " HEALTH=OK") || (echo "HEALTH=FAIL"; exit 1)
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
          ENDSSH

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/deploy_key

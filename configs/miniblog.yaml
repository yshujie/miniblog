app:
  name: "miniblog"
  version: "1.0.0"
  mode: "production"  # development, production

# 服务器配置
server:
  name: "miniblog"
  address: "0.0.0.0"
  port: 8080  # 标准端口，方便代理
  port-ssl: 8443
  read-timeout: 60    # 秒
  write-timeout: 60   # 秒
  run-mode: "release"   # Gin 开发模式, 可选值有：debug, release, test

# 数据库配置 (连接到 infra 项目提供的 MySQL)
database:
  driver: "mysql"
  host: "${MYSQL_HOST:infra-mysql}"  # 连接到外部 MySQL 容器
  port: "${MYSQL_PORT:3306}"
  username: "${MYSQL_USERNAME:miniblog}"
  password: "${MYSQL_PASSWORD:miniblog123}"
  dbname: "${MYSQL_DATABASE:miniblog}"
  max-idle-conns: 10
  max-open-conns: 100
  conn-max-lifetime: 3600  # 秒
  log-level: 1 # GORM log level, 1: silent, 2:error, 3:warn, 4:info (生产环境使用 silent)

# Redis 配置 (连接到 infra 项目提供的 Redis)
redis:
  host: "${REDIS_HOST:infra-redis}"  # 连接到外部 Redis 容器
  port: "${REDIS_PORT:6379}"
  password: "${REDIS_PASSWORD:}"
  db: "${REDIS_DB:1}"  # 使用专用的数据库索引
  pool-size: 100
  min-idle-conns: 10

# 日志配置
log:
  disable-caller: true # 是否开启 caller，如果开启会在日志中显示调用日志所在的文件和行号
  disable-stacktrace: true # 是否禁止在 panic 及以上级别打印堆栈信息
  level: debug # 指定日志级别，可选值：debug, info, warn, error, dpanic, panic, fatal
  format: console # 指定日志显示格式，可选值：console, json
  output-paths: [/data/logs/miniblog/miniblog.log, stdout] # 指定日志输出位置，多个输出，用 `逗号 + 空格` 分开。stdout：标准输出，

# jwt 配置
jwt:
  secret: "" # JWT 签发密钥
  expire: 86400      # token 过期时间（秒）

# cors 配置
cors:
  allowed-origins:
    - "*"
  allowed-methods:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
    - "OPTIONS"
  allowed-headers:
    - "Content-Type"
    - "Authorization"

# HTTPS 服务器相关配置
tls:
  cert: /etc/miniblog/ssl/api.yangshujie.com.crt # 服务端证书文件
  key: /etc/miniblog/ssl/api.yangshujie.com.key # 服务端私钥文件
  strict: false # 当 true 时（或环境变量 TLS_STRICT=1），若证书/私钥不存在启动将失败（生产可启用）

# feishu 配置
feishu:
  docreader:
    appid: ""
    appsecret: ""